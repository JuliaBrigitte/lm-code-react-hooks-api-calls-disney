{"version":3,"sources":["components/header.tsx","FavouritesInclUpdateContext.tsx","components/character.tsx","components/character_container.tsx","components/navigation.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","currentPage","className","FavouritesContext","React","createContext","FavouritesUpdateContext","useFavourites","useContext","FavouritesInclUpdateContext","children","useState","characterFavourites","setCharacterFavourites","Provider","value","Character","character","updateFavourites","characters","imageSrc","imageUrl","name","onClick","characterId","filter","_id","length","addToFavourites","updatedFavourites","toggleFavouriteForCharacter","eachCharacter","src","alt","CharacterContainer","rows","cols","forEach","index","push","buildRows","Navigation","setCurrentPage","setCharacters","allCharacters","showFavourites","setShowFavourites","favourites","App","setAllCharacters","useEffect","getCharacters","pageNumber","a","axios","get","response","data","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8e59b7ac.chunk.js","sourcesContent":["\n// note the anonymous type here for our props\n// - a simple type like this doesn't always NEED an interface declaration\nconst Header : React.FC<{ currentPage : number }> = ( { currentPage }) => \n    <header className=\"header__container\">\n      <h1 className=\"header__title\">The World of Disney</h1>\n      <p className=\"header__page-count \">Page: {currentPage}</p>\n    </header>;\n\nexport default Header;","import React, { useContext, useState } from \"react\";\nimport {DisneyCharacter} from \"./disney_character\";\nconst FavouritesContext = React.createContext<any | null>(null);\nconst FavouritesUpdateContext = React.createContext<any | null>(null);\n\nexport function useFavourites()\n{\n    return useContext(FavouritesContext)\n}\nexport function useFavouritesUpdate()\n{\n    return useContext(FavouritesUpdateContext)\n}\n\nconst FavouritesInclUpdateContext: React.FC = ({ children }) =>\n{\n    const [characterFavourites, setCharacterFavourites] = useState<Array<DisneyCharacter>>([]);\n    return (\n        <FavouritesContext.Provider value={characterFavourites}>\n            <FavouritesUpdateContext.Provider value={setCharacterFavourites}>\n                {children}\n            </FavouritesUpdateContext.Provider>\n        </FavouritesContext.Provider >\n    )\n}\n\nexport default FavouritesInclUpdateContext;","import { DisneyCharacter } from \"../disney_character\"\nimport {useFavourites} from \"../FavouritesInclUpdateContext\";\n\ninterface CharacterProps{\n    character: DisneyCharacter;\n    updateFavourites: (favourites: Array<number>) => void;\n    characters: Array<DisneyCharacter>\n}\n\n// notice we're updating the props destructuring to access the two new props too:\nconst Character : React.FC<CharacterProps> = ( { character, updateFavourites, characters }) => {\n    const characterFavourites = useFavourites();\n\n    // Define a default in case the character doesn't have an image\n    let imageSrc = \"https://picsum.photos/300/200/?blur\";\n    if (character.imageUrl)\n    {\n        // API seems to include extra path for images so here we strip it off to fetch raw image\n        //imageSrc = character.imageUrl.substring(0, character.imageUrl.indexOf('/revision'));\n        imageSrc = character.imageUrl;\n\n    }\n\n    function toggleFavouriteForCharacter(characterId : number)\n    {\n        if (characterFavourites.filter((character: DisneyCharacter) => character._id === characterId).length === 0)\n        {\n            // add to favourites\n            const addToFavourites = characters.filter((character: DisneyCharacter) => character._id === characterId);\n            updateFavourites([...characterFavourites, ...addToFavourites]);\n        }\n        else\n        {\n            // remove from favourites\n            const updatedFavourites = characterFavourites.filter((character: DisneyCharacter) => character._id !== characterId);\n            updateFavourites(updatedFavourites);\n        }\n    }\n\n    return (\n        <article className=\"character-item\">\n\n            <h2>{character.name}</h2>\n\n            <div className=\"character-item__actions\" onClick={() => toggleFavouriteForCharacter(character._id)}>\n                {characterFavourites.filter((eachCharacter: DisneyCharacter) => eachCharacter._id === character._id).length === 0 ? \"Add to Favourites\" : \"Favourited\"}\n            </div>\n\n            <img className=\"character-item__img\" src={imageSrc} alt={character.name} />\n\n        </article>\n        )\n}\n\nexport default Character","import React from 'react';\nimport { DisneyCharacter } from '../disney_character';\nimport Character from './character';\nimport {useFavouritesUpdate} from \"../FavouritesInclUpdateContext\";\n\ninterface CharacterContainerProps{\n    characters: Array<DisneyCharacter>;\n    // updateFavourites: (favourites: Array<number>) => void;\n}\n\n// for our props we can reuse the DisneyCharacter interface\n// - defining an anonymous type that just has one property - an array of DisneyCharacter\nconst CharacterContainer : React.FC<CharacterContainerProps> = ( { characters }) =>\n{\n    const updateFavourites=useFavouritesUpdate();\n\t// this function separates our array of DisneyCharacters into rows and columns\n    const buildRows = () => {\n        \n\t\t// we'll need arrays to store the rows and cols in, and they will be of type JSX.Element\n\t\tlet rows : Array<JSX.Element> = [], cols : Array<JSX.Element> = [];\n        \n\t\tcharacters.forEach((character, index) => {\n                cols.push(\n                    <Character key={character._id}\n                               character={character}\n                               updateFavourites={updateFavourites}\n                               characters={characters}\n                    />\n                );            if ((index + 1) % 5 === 0) {\n                rows.push(\n                    <div className=\"character-row\" key={index}>\n                        {cols}\n                    </div>\n                )\n                cols = []\n            }\n        });\n\n        // Final remaining columns\n        if (cols.length > 0) {\n            rows.push(\n                <div className=\"character-row\" key={characters.length}>\n                    {cols}\n                </div>\n            )\n        }\n\n        return rows;\n    }\n\n    return (\n        <div className=\"character-container\">\n            {buildRows()}\n        </div>\n    )\n}\n\nexport default CharacterContainer;","\n// our props have two properties - a number, and a function that takes a number and returns void\n// we can define this as an interface, or anonymously like this:\nimport {useState} from \"react\";\nimport {useFavourites} from \"../FavouritesInclUpdateContext\";\nimport {DisneyCharacter} from \"../disney_character\";\nimport character from \"./character\";\n\nconst Navigation : React.FC<{ currentPage: number, setCurrentPage: (page: number) => void, characters: Array<DisneyCharacter>, setCharacters: (characters: Array<DisneyCharacter>) => void, allCharacters: Array<DisneyCharacter>\n}>\n\t= ({ currentPage, setCurrentPage, characters, setCharacters, allCharacters }) =>\n\t{\n    const nextPage = () => {\n        if (currentPage <= characters.length%100)\n        {\n            const newPageNumber = currentPage + 1;\n            setCurrentPage(newPageNumber);\n        }\n    }\n\n    const prevPage = () => {\n        if (currentPage > 1) {\n            const newPageNumber = currentPage - 1;\n            setCurrentPage(newPageNumber);\n        }\n    }\n\n    const [showFavourites, setShowFavourites] = useState<boolean>(true)\n    const favourites = useFavourites();\n\n    const toggleFavouritesOrAll = () =>\n    {\n        if (showFavourites)\n        {\n            setCharacters(favourites);\n            setCurrentPage(1);\n        }\n        else\n        {\n            setCharacters(allCharacters);\n        }\n        setShowFavourites(!showFavourites);\n\n    }\n\n    return (\n        <div className=\"navigation\">\n            {showFavourites?\n            <div className=\"navigation__item\">\n                <button className=\"navigation__button\" onClick={prevPage}>Prev Page</button>\n            </div>:\"\"}\n            <div className=\"navigation__item\">\n                <button className=\"navigation__button\" onClick={toggleFavouritesOrAll}>{(showFavourites ? \"Show Favourites\" : \"All Characters\")}</button>\n            </div>\n            {showFavourites?\n            <div className=\"navigation__item\">\n                <button className=\"navigation__button\" onClick={nextPage}>Next Page</button>\n            </div>:\"\"}\n        </div>\n\n    )\n}\n\nexport default Navigation;","import './App.css';\nimport React, {useEffect, useState } from 'react';\nimport Header from './components/header';\nimport CharacterContainer from './components/character_container';\nimport Navigation from './components/navigation';\nimport { DisneyCharacter } from './disney_character';\nimport axios from 'axios';\nimport FavouritesInclUpdateContext from \"./FavouritesInclUpdateContext\";\n\n//export const FavouritesContext = React.createContext<number[]>( []);\n\nconst App : React.FC = () => {\n  // Some dummy state representing disney characters\n  const [characters, setCharacters] = useState<Array<DisneyCharacter>>([\n    {\n      _id: 6,\n      name: \"'Olu Mel\",\n      imageUrl: \"https://static.wikia.nocookie.net/disney/images/6/61/Olu_main.png\"\n    },\n    {\n      _id: 25,\n      name: \"Abu\",\n      imageUrl: \"https://static.wikia.nocookie.net/disney/images/3/3f/Profile_-_Abu.png\"\n    },\n    {\n      _id: 30,\n      name: \"Ace\",\n      imageUrl: \"https://static.wikia.nocookie.net/disney/images/1/1e/Profile_-_Ace.png\"\n    },\n  ]);\n  const [allCharacters, setAllCharacters] = useState<Array<DisneyCharacter>>(characters);\n\n  const [currentPage, setCurrentPage] = useState<number>(1);\n  //const [characterFavourites, setCharacterFavourites] = useState<Array<DisneyCharacter>>([]);\n\n  useEffect(() =>\n  {\n    getCharacters(currentPage)\n  }, [currentPage]);\n\n   const getCharacters = async (pageNumber : number) => {\n     try\n     {\n       const response = await axios.get('https://api.disneyapi.dev/characters?page=' + pageNumber);\n       setCharacters(response.data.data);\n       setAllCharacters(response.data.data);\n     }\n     catch(error)\n     {\n       // do something with the error here\n     }\n   }\n\n  return (\n      // <FavouritesContext.Provider value={characterFavourites}>\n      <FavouritesInclUpdateContext>\n        <div className=\"page\">\n          <Header currentPage={currentPage} />\n          <Navigation currentPage={currentPage} setCurrentPage={setCurrentPage} characters={characters} setCharacters={setCharacters} allCharacters={allCharacters}/>\n          <CharacterContainer characters={characters}  />\n          {/*<CharacterContainer characters={characters} updateFavourites={setCharacterFavourites}  />*/}\n        </div>\n      </FavouritesInclUpdateContext>\n      // </FavouritesContext.Provider>\n\n  );\n\n}\n\nexport default App;\n\n\n\n\n\n\n\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}